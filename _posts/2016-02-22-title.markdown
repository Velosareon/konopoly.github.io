---
layout: post
title: find the area of overlay between two rectangles
date: 2016-02-22 19:15:00
description: code practice problem
---
Write a function to find the rectangular intersection of two given rectangles.

Example:
{% highlight java %}
//given objects for each rectangle
//object arguments are (leftX, bottomY, width, height)
Rectangle firstRectangle = new Rectangle(1,1,3,1);
Rectangle secondRectangle = new Rectangle(2,1,1,2);

//result is a rectangle object
{% endhighlight %}
<img src="/img/1.png" style="width:304px;height:228px;">
<img src="/img/2.png" style="width:250px;height:228px;">

Solution Overview:
Determine the X and Y sizes of the lines connected to the given (X,Y) point. Then
determine if the X lines overlap between the two rectangles. Do the same for the Y lines.
Finally simply multiply the X and Y overlap to determine the area of the overlap rectangles.
<br>
To determine the overlap of the two X lines determine the highest endpoint of the two lines. Then compare that value to smallest endpoint of the two X lines. If the lowest endpoint is larger than
the highest endpoint, then there is no overlap. Otherwise subtract the highest endpoint from the
lowest endpoint to get the overlap size.
<br>
<img src="/img/3.png" style="width:304px;height:90px;">
<img src="/img/4.png" style="width:304px;height:90px;">
<br>
The same thing is done to get the overlap between the two Y lines.

```javascript
public class P6
{
	public static void main(String[] args)
	{
		//(leftX, bottomY, width, height)
		Rectangle firstRectangle = new Rectangle(1,1,6,3);
		Rectangle secondRectangle = new Rectangle(2,1,4,6);

		//area of overlay between the two rectangles
		System.out.println(findOverlayArea( findXOverlay(firstRectangle.determineXLine(),
			secondRectangle.determineXLine()), findYOverlay(firstRectangle.determineYLine(), secondRectangle.determineYLine())));
	}

	//determine overlay between x line of the two rectangles
	public static int findXOverlay(int[] x, int[] sx)
	{
		int higherStartingPoint = Math.max(x[0],sx[0]);
		int lowerEndingPoint = Math.min(x[1],sx[1]);
		int totalXOverlap = 0;
		if(higherStartingPoint >= lowerEndingPoint)
		{
			return totalXOverlap;
		}
		else
		{
			totalXOverlap = lowerEndingPoint - higherStartingPoint;
			return totalXOverlap;
		}
	}
	//determine overlay between y line of the two rectangles
	public static int findYOverlay(int[] y, int[] sy)
	{
		int higherStartingPoint = Math.max(y[0],sy[0]);
		int lowerEndingPoint = Math.min(y[1],sy[1]);
		int totalYOverlap = 0;
		if(higherStartingPoint >= lowerEndingPoint)
		{
			return totalYOverlap;
		}
		else
		{
			totalYOverlap = lowerEndingPoint - higherStartingPoint;
			return totalYOverlap;
		}
	}
	public static int findOverlayArea(int xoverlay, int yoverlay)
	{
		return xoverlay*yoverlay;
	}
}
```

{% highlight java %}
{% endhighlight %}
